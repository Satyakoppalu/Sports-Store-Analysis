/*
Data Exploration on product data for an online sports retail company.
Skills used: Joins, CTE's, Temp Tables, Windows Functions, Aggregate Functions, Creating Views
*/

--Counting all non-missing values in all four tables
SELECT COUNT(*) AS total_rows, 
COUNT(i.description) AS count_description,
COUNT(f.listing_price) AS count_listing_price,
COUNT(t.last_visited) AS count_last_visited
FROM info AS i
INNER JOIN finance AS f
ON i.product_id=f.product_id
INNER JOIN traffic AS t
ON f.product_id=t.product_id;

---------------------------------------------------------------------------------------

--Nike VS Adidas pricing
SELECT brand, listing_price::integer, COUNT(finance) AS product_count
FROM brands
INNER JOIN finance
ON brands.product_id=finance.product_id
GROUP BY brand,listing_price
HAVING listing_price>0
ORDER BY listing_price DESC;

---------------------------------------------------------------------------------------

--Labeling price ranges and calculating revenue generated by them
SELECT brand, COUNT(finance) AS product_count, SUM(revenue) AS total_revenue,
        CASE WHEN listing_price<42 THEN 'Budget'
        WHEN listing_price>=42 AND listing_price<72 THEN 'Average'
        WHEN listing_price>=74 AND listing_price<129 THEN 'Expensive'
        WHEN listing_price>=129 THEN 'Elite'
        END AS price_category
        
        FROM brands
INNER JOIN finance
ON brands.product_id=finance.product_id
WHERE brand IS NOT NULL
GROUP BY brand,price_category
ORDER BY total_revenue DESC;

--------------------------------------------------------------------------------------

--Calculating average discount offered by brand
SELECT brand, ROUND(AVG(discount)*100,2) AS average_discount
FROM brands
INNER JOIN finance
ON brands.product_id=finance.product_id
GROUP BY brand
HAVING brand IS NOT NULL
ORDER BY average_discount;

---------------------------------------------------------------------------------------

--Calculating the correlation between reviews and revenue
SELECT ROUND(corr(reviews,revenue)::numeric,4) AS review_revenue_corr
FROM sports_reviews
INNER JOIN finance
ON sports_reviews.product_id=finance.product_id
WHERE reviews IS NOT NULL;

---------------------------------------------------------------------------------------

--Description length vs ratings
SELECT TRUNC(LENGTH(description),-2) AS description_length, ROUND(AVG(rating::numeric),2) AS average_rating--converted to bins
FROM info
INNER JOIN sports_reviews
ON info.product_id=sports_reviews.product_id
WHERE description IS NOT NULL
GROUP BY description_length
ORDER BY description_length;

---------------------------------------------------------------------------------------

--Counting the number of reviews per brand per month.
SELECT brand, EXTRACT(month FROM last_visited) AS month, COUNT(sports_reviews.*) AS num_reviews
FROM brands
INNER JOIN traffic
ON brands.product_ID=traffic.product_ID
INNER JOIN sports_reviews
ON traffic.product_ID=sports_reviews.product_ID
GROUP BY brand, month
HAVING brand IS NOT NULL AND EXTRACT(month FROM last_visited)IS NOT NULL
ORDER BY brand, month;

----------------------------------------------------------------------------------------

--Calculating the perfomance of footwear products
WITH footwear AS
(
    SELECT description, revenue
    FROM info 
    INNER JOIN finance  
        ON info.product_id = finance.product_id
    WHERE description ILIKE '%shoe%'
        OR description ILIKE '%trainer%'
        OR description ILIKE '%foot%'
        AND description IS NOT NULL
)

SELECT COUNT(*) AS num_footwear_products, 
    percentile_disc(0.5) WITHIN GROUP (ORDER BY revenue) AS median_footwear_revenue
FROM footwear;

--------------------------------------------------------------------------------------

--Calculating the perfomance of clothing products
WITH footwear AS
(
    SELECT description, revenue
    FROM info 
    INNER JOIN finance  
        ON info.product_id = finance.product_id
    WHERE description ILIKE '%shoe%'
        OR description ILIKE '%trainer%'
        OR description ILIKE '%foot%'
        AND description IS NOT NULL
)

SELECT COUNT(info.*) AS num_clothing_products, 
    percentile_disc(0.5) WITHIN GROUP (ORDER BY revenue) AS median_clothing_revenue
FROM info
INNER JOIN finance
ON info.product_id=finance.product_id
WHERE info.description NOT IN (SELECT description FROM footwear);



